<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 1.0
// Source: dataset.proto
//   Date: 2015-11-08 19:11:24

namespace loadtest {

  class SmallDataset extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $value = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'loadtest.SmallDataset');

      // OPTIONAL STRING value = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "value";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <value> has a value
     *
     * @return boolean
     */
    public function hasValue(){
      return $this->_has(1);
    }
    
    /**
     * Clear <value> value
     *
     * @return \loadtest\SmallDataset
     */
    public function clearValue(){
      return $this->_clear(1);
    }
    
    /**
     * Get <value> value
     *
     * @return string
     */
    public function getValue(){
      return $this->_get(1);
    }
    
    /**
     * Set <value> value
     *
     * @param string $value
     * @return \loadtest\SmallDataset
     */
    public function setValue( $value){
      return $this->_set(1, $value);
    }
  }
}

namespace loadtest {

  class LargeDataset extends \DrSlump\Protobuf\Message {

    /**  @var int */
    public $integer1 = null;
    
    /**  @var int */
    public $integer2 = null;
    
    /**  @var int[]  */
    public $integer3 = array();
    
    /**  @var string */
    public $str1 = null;
    
    /**  @var string */
    public $str2 = null;
    
    /**  @var string */
    public $byte_array = null;
    
    /**  @var \loadtest\SubMessage[]  */
    public $sub_message = array();
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'loadtest.LargeDataset');

      // OPTIONAL INT32 integer1 = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "integer1";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT64 integer2 = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "integer2";
      $f->type      = \DrSlump\Protobuf::TYPE_INT64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED INT32 integer3 = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "integer3";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $descriptor->addField($f);

      // OPTIONAL STRING str1 = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "str1";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING str2 = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "str2";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BYTES byte_array = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "byte_array";
      $f->type      = \DrSlump\Protobuf::TYPE_BYTES;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REPEATED MESSAGE sub_message = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "sub_message";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\loadtest\SubMessage';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <integer1> has a value
     *
     * @return boolean
     */
    public function hasInteger1(){
      return $this->_has(1);
    }
    
    /**
     * Clear <integer1> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearInteger1(){
      return $this->_clear(1);
    }
    
    /**
     * Get <integer1> value
     *
     * @return int
     */
    public function getInteger1(){
      return $this->_get(1);
    }
    
    /**
     * Set <integer1> value
     *
     * @param int $value
     * @return \loadtest\LargeDataset
     */
    public function setInteger1( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <integer2> has a value
     *
     * @return boolean
     */
    public function hasInteger2(){
      return $this->_has(2);
    }
    
    /**
     * Clear <integer2> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearInteger2(){
      return $this->_clear(2);
    }
    
    /**
     * Get <integer2> value
     *
     * @return int
     */
    public function getInteger2(){
      return $this->_get(2);
    }
    
    /**
     * Set <integer2> value
     *
     * @param int $value
     * @return \loadtest\LargeDataset
     */
    public function setInteger2( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <integer3> has a value
     *
     * @return boolean
     */
    public function hasInteger3(){
      return $this->_has(3);
    }
    
    /**
     * Clear <integer3> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearInteger3(){
      return $this->_clear(3);
    }
    
    /**
     * Get <integer3> value
     *
     * @param int $idx
     * @return int
     */
    public function getInteger3($idx = NULL){
      return $this->_get(3, $idx);
    }
    
    /**
     * Set <integer3> value
     *
     * @param int $value
     * @return \loadtest\LargeDataset
     */
    public function setInteger3( $value, $idx = NULL){
      return $this->_set(3, $value, $idx);
    }
    
    /**
     * Get all elements of <integer3>
     *
     * @return int[]
     */
    public function getInteger3List(){
     return $this->_get(3);
    }
    
    /**
     * Add a new element to <integer3>
     *
     * @param int $value
     * @return \loadtest\LargeDataset
     */
    public function addInteger3( $value){
     return $this->_add(3, $value);
    }
    
    /**
     * Check if <str1> has a value
     *
     * @return boolean
     */
    public function hasStr1(){
      return $this->_has(4);
    }
    
    /**
     * Clear <str1> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearStr1(){
      return $this->_clear(4);
    }
    
    /**
     * Get <str1> value
     *
     * @return string
     */
    public function getStr1(){
      return $this->_get(4);
    }
    
    /**
     * Set <str1> value
     *
     * @param string $value
     * @return \loadtest\LargeDataset
     */
    public function setStr1( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <str2> has a value
     *
     * @return boolean
     */
    public function hasStr2(){
      return $this->_has(5);
    }
    
    /**
     * Clear <str2> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearStr2(){
      return $this->_clear(5);
    }
    
    /**
     * Get <str2> value
     *
     * @return string
     */
    public function getStr2(){
      return $this->_get(5);
    }
    
    /**
     * Set <str2> value
     *
     * @param string $value
     * @return \loadtest\LargeDataset
     */
    public function setStr2( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <byte_array> has a value
     *
     * @return boolean
     */
    public function hasByteArray(){
      return $this->_has(6);
    }
    
    /**
     * Clear <byte_array> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearByteArray(){
      return $this->_clear(6);
    }
    
    /**
     * Get <byte_array> value
     *
     * @return string
     */
    public function getByteArray(){
      return $this->_get(6);
    }
    
    /**
     * Set <byte_array> value
     *
     * @param string $value
     * @return \loadtest\LargeDataset
     */
    public function setByteArray( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <sub_message> has a value
     *
     * @return boolean
     */
    public function hasSubMessage(){
      return $this->_has(7);
    }
    
    /**
     * Clear <sub_message> value
     *
     * @return \loadtest\LargeDataset
     */
    public function clearSubMessage(){
      return $this->_clear(7);
    }
    
    /**
     * Get <sub_message> value
     *
     * @param int $idx
     * @return \loadtest\SubMessage
     */
    public function getSubMessage($idx = NULL){
      return $this->_get(7, $idx);
    }
    
    /**
     * Set <sub_message> value
     *
     * @param \loadtest\SubMessage $value
     * @return \loadtest\LargeDataset
     */
    public function setSubMessage(\loadtest\SubMessage $value, $idx = NULL){
      return $this->_set(7, $value, $idx);
    }
    
    /**
     * Get all elements of <sub_message>
     *
     * @return \loadtest\SubMessage[]
     */
    public function getSubMessageList(){
     return $this->_get(7);
    }
    
    /**
     * Add a new element to <sub_message>
     *
     * @param \loadtest\SubMessage $value
     * @return \loadtest\LargeDataset
     */
    public function addSubMessage(\loadtest\SubMessage $value){
     return $this->_add(7, $value);
    }
  }
}

namespace loadtest {

  class SubMessage extends \DrSlump\Protobuf\Message {

    /**  @var float */
    public $double1 = null;
    
    /**  @var int */
    public $fixed_integer = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'loadtest.SubMessage');

      // OPTIONAL DOUBLE double1 = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "double1";
      $f->type      = \DrSlump\Protobuf::TYPE_DOUBLE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL FIXED64 fixed_integer = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "fixed_integer";
      $f->type      = \DrSlump\Protobuf::TYPE_FIXED64;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <double1> has a value
     *
     * @return boolean
     */
    public function hasDouble1(){
      return $this->_has(1);
    }
    
    /**
     * Clear <double1> value
     *
     * @return \loadtest\SubMessage
     */
    public function clearDouble1(){
      return $this->_clear(1);
    }
    
    /**
     * Get <double1> value
     *
     * @return float
     */
    public function getDouble1(){
      return $this->_get(1);
    }
    
    /**
     * Set <double1> value
     *
     * @param float $value
     * @return \loadtest\SubMessage
     */
    public function setDouble1( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <fixed_integer> has a value
     *
     * @return boolean
     */
    public function hasFixedInteger(){
      return $this->_has(2);
    }
    
    /**
     * Clear <fixed_integer> value
     *
     * @return \loadtest\SubMessage
     */
    public function clearFixedInteger(){
      return $this->_clear(2);
    }
    
    /**
     * Get <fixed_integer> value
     *
     * @return int
     */
    public function getFixedInteger(){
      return $this->_get(2);
    }
    
    /**
     * Set <fixed_integer> value
     *
     * @param int $value
     * @return \loadtest\SubMessage
     */
    public function setFixedInteger( $value){
      return $this->_set(2, $value);
    }
  }
}

